-------------------------------------------------- 1 savaitė -----------------------------------------

2022-09-06:
  Sukurti REST API savo sugalvotai kolekcijai. Geriausia tai pačiai kolekcijai kurią naudojot React
  atsiskaitymui su JSON server.
    API SERVER endpoints:
      * GET     '/collection-name'     - parsiunčia visus
      * GET     '/collection-name/:id' - parsiunčia vieną pagal id
      * POST    '/collection-name'     - sukuria naują
      * PUT     '/collection-name/:id' - perrašo esančio elementos duomenis, ištrinant senus
      * DELETE  '/collection-name/:id' - ištrina elementą pagal id
    
    File structure:
      helpers/ - pagalbinės funkcijos
      routers/ - endpoint'ų aprašymo failai
      controllers/ - logikos eigos aprašymo failai (kolkas ir logika)
      main.js - serverio konfigūracijos, susaistymo ir paleidomo failas

2022-09-07:  
  Įsirašyti middleware ir pritaikyti savo projektui:
    * cors
    * morgan
    * express.json (bodyParser)
  
  Paslėpkite konfiguruojamus ir jautrius duomenis .env faile, naudojant "dotenv" biblioteką

2022-09-08: 
  Perrašyti savo kolekcijos REST API naudojant MongoDB Atlass per 'mongoose' bibliotekos Modelį 

-------------------------------------------------- 2 savaitė -----------------------------------------

2022-09-12:
  * Sukurkite užklausos klaidos tipą
  * Sukurkite pagalbines funkcijas kurti 404 ir 400 klaidas:
    * 404 - NotFound 
    * 400 - BadData
  * Parašykite bendrą funkciją 'sendErrorResponse' siųsti užklausų klaidoms
  * Visas savo kolekcijos užklausas apdorokite su funkcija 'sendErrorResponse'
  * aprašykite validacijos schema savo esybės modelio faile
  * Sukurkite statinius metodus modeliui 'validate' ir 'validateUpdate'
  * Pritaikykite validavimo funkcijas metodams:
    * 'update' - EntityModel.validateUpdate
    * 'create' - EntityModel.validate
    * 'replace' - EntityModel.validate

2022-09-13:
  Pasiruošimas:
    * https://www.youtube.com/watch?v=C3icLzBtg8I&t=3s&ab_channel=ChristopherKalodikis
    * peržiūrėkite aplanko 'vaizdiniai pvz' iliustracijas, jas išanalizuokite ir suformuokite klausimus.

  Projekto vystymas:
    * Sukurti REST API savo šalutinei/šalutinėms struktūroms
    * Pagrindinės struktūros GET metodams sukurkite galimybę apjungti duomenis su šalutine struktūra
      naudojant query parametrą 'joinBy';
    * Papildykite serverio middleware'us, kad galėtumėte dalintis statiniais failais iš aplanko '/public'
    * Visas užklausas REST API užklausų maršrutizatorius (Routers) išsaugokite po bendru maršrutizatoriumi
      'apiRouter'

2022-09-14:
  * Sukurti vartotojo modelį su nuorodomis į jūsų projekto idėjos kitas kolekcijas
  * Sukurti validacijos schemą su asinchroniniu patikrinimu
  * Sukurkite vartotojo modeliui statinę asinchroninę validavimo funkciją

2022-09-15:
  * Sukurti vartotojų REST API, hash'uojant slaptažodžius
  * Sukurti auth kontrolerį
    * el. pašto ir slaptažodžio porų patikrinimo įgalinimas
    * vartotojo sukūrimas lyginant slaptažodį ir slaptažodžio patvirtinimą

-------------------------------------------------- 3 savaitė -----------------------------------------
2022-09-19:
  * Sukurti token'o šifravimui skirtą .env kintamajį
  * Sukurkite token helper'į šifruoti ir dešifruoti duomenims
  * Registracijos ir Prisijungimo metu, išsiųskite klientui šifruotą tokeną' su email ir role
  * susikonfiguruokite Thunder Client arba Postman taip, kad po prisijungimu/registracijos į aplnkos kintamuosius išsisaugotų token'asinchroniniu
  * Siunčiant kitų užklausų duomenis į authorization headerį įrašykite "Bearer" token'ą (iš aplinkos kintamojo)
  * Sukurkite 3 middleware
    * requireAuth - patikrinti ar užklausos metu, authorization headeryje buvo token'as su teisingai duomenimis
    * requireAdmin - patikrinti ar prisijungęs vartotojas yra adminas (naudoja requireAuth)
    * requireUser - patikrinti ar prisijungęs vartotojas yra paprastas vartotojas (naudoja requireAuth)   
  * Pritaikykite savo sukurtu middleware savo pasirinktame router'yje'/'iuose'.

2022-09-20:
  * Savo aplikacijos serveriui įgalinti vartotoją turėti ryšį many-to-many. Šio ryšio įgalinimui:
    * Sukurkite UserModel'yje masyvą į kitos struktūros objektus
    * Sukurkite router'į kurio užklausos būtų aptarnaujamos tik prisijungus su vartotojo (require user middleware)
    * Įgalinkite vartotojo ir jo savybės (susijusios su kita struktūra) manipuliacijos veiksmus
      * gauti visus duomenis 
      * sukurti duomenis 
      * atnaujinti duomenis
      * ištrinti duomenis

  Pavyzdžiai:
    * User.cartItems
    * User.favoritePlaces
    * User.likedPosts
    * User.comments
    ir t.t.



